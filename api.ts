/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * Grounded entity schema.
 * @export
 * @interface GroundedEntity
 */
export interface GroundedEntity {
    /**
     * 
     * @type {string}
     * @memberof GroundedEntity
     */
    'name': string;
    /**
     * 
     * @type {Array<Grounding>}
     * @memberof GroundedEntity
     */
    'groundings'?: Array<Grounding>;
}
/**
 * Schema for grounding.
 * @export
 * @interface Grounding
 */
export interface Grounding {
    /**
     * 
     * @type {string}
     * @memberof Grounding
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Grounding
     */
    'namespace': string;
    /**
     * 
     * @type {string}
     * @memberof Grounding
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof Grounding
     */
    'score': number;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * HF predicted entity schema.  Will break for `none` token aggregation strategy.
 * @export
 * @interface KeywordEntity
 */
export interface KeywordEntity {
    /**
     * 
     * @type {string}
     * @memberof KeywordEntity
     */
    'entity_group': string;
    /**
     * 
     * @type {number}
     * @memberof KeywordEntity
     */
    'score': number;
    /**
     * 
     * @type {string}
     * @memberof KeywordEntity
     */
    'word': string;
    /**
     * 
     * @type {number}
     * @memberof KeywordEntity
     */
    'start': number;
    /**
     * 
     * @type {number}
     * @memberof KeywordEntity
     */
    'end': number;
}
/**
 * Payload for parse endpoint.
 * @export
 * @interface SearchQueryIn
 */
export interface SearchQueryIn {
    /**
     * 
     * @type {string}
     * @memberof SearchQueryIn
     */
    'raw_query': string;
}
/**
 * Response for parse endpoint.
 * @export
 * @interface SearchQueryOut
 */
export interface SearchQueryOut {
    /**
     * 
     * @type {Array<KeywordEntity>}
     * @memberof SearchQueryOut
     */
    'raw_entities': Array<KeywordEntity>;
    /**
     * 
     * @type {GroundedEntity}
     * @memberof SearchQueryOut
     */
    'term1': GroundedEntity;
    /**
     * 
     * @type {GroundedEntity}
     * @memberof SearchQueryOut
     */
    'term2'?: GroundedEntity;
    /**
     * 
     * @type {string}
     * @memberof SearchQueryOut
     */
    'population'?: string;
    /**
     * 
     * @type {SemanticSearchType}
     * @memberof SearchQueryOut
     */
    'search_type': SemanticSearchType;
}
/**
 * Defines modes for semantic search.
 * @export
 * @enum {string}
 */

export enum SemanticSearchType {
    RiskFactorOf = 'risk_factor_of',
    Outcome = 'outcome',
    Relationship = 'relationship',
    Relationship2d = 'relationship_2d',
    SingleVariable2d = 'single_variable_2d'
}

/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<string | number>}
     * @memberof ValidationError
     */
    'loc': Array<string | number>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Forward INDRA request.
         * @summary Get Indra
         * @param {any} restOfPath 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIndraIndraRestOfPathPost: async (restOfPath: any, body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'restOfPath' is not null or undefined
            assertParamExists('getIndraIndraRestOfPathPost', 'restOfPath', restOfPath)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('getIndraIndraRestOfPathPost', 'body', body)
            const localVarPath = `/indra/{rest_of_path}`
                .replace(`{${"rest_of_path"}}`, encodeURIComponent(String(restOfPath)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Parse unstructured search.
         * @summary Parse Query
         * @param {SearchQueryIn} searchQueryIn 
         * @param {boolean} [ground] To ground entities or not.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parseQueryParsePost: async (searchQueryIn: SearchQueryIn, ground?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'searchQueryIn' is not null or undefined
            assertParamExists('parseQueryParsePost', 'searchQueryIn', searchQueryIn)
            const localVarPath = `/parse`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ground !== undefined) {
                localVarQueryParameter['ground'] = ground;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchQueryIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Forward INDRA request.
         * @summary Get Indra
         * @param {any} restOfPath 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIndraIndraRestOfPathPost(restOfPath: any, body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIndraIndraRestOfPathPost(restOfPath, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Parse unstructured search.
         * @summary Parse Query
         * @param {SearchQueryIn} searchQueryIn 
         * @param {boolean} [ground] To ground entities or not.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async parseQueryParsePost(searchQueryIn: SearchQueryIn, ground?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchQueryOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.parseQueryParsePost(searchQueryIn, ground, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Forward INDRA request.
         * @summary Get Indra
         * @param {any} restOfPath 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIndraIndraRestOfPathPost(restOfPath: any, body: object, options?: any): AxiosPromise<any> {
            return localVarFp.getIndraIndraRestOfPathPost(restOfPath, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Parse unstructured search.
         * @summary Parse Query
         * @param {SearchQueryIn} searchQueryIn 
         * @param {boolean} [ground] To ground entities or not.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        parseQueryParsePost(searchQueryIn: SearchQueryIn, ground?: boolean, options?: any): AxiosPromise<SearchQueryOut> {
            return localVarFp.parseQueryParsePost(searchQueryIn, ground, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getIndraIndraRestOfPathPost operation in DefaultApi.
 * @export
 * @interface DefaultApiGetIndraIndraRestOfPathPostRequest
 */
export interface DefaultApiGetIndraIndraRestOfPathPostRequest {
    /**
     * 
     * @type {any}
     * @memberof DefaultApiGetIndraIndraRestOfPathPost
     */
    readonly restOfPath: any

    /**
     * 
     * @type {object}
     * @memberof DefaultApiGetIndraIndraRestOfPathPost
     */
    readonly body: object
}

/**
 * Request parameters for parseQueryParsePost operation in DefaultApi.
 * @export
 * @interface DefaultApiParseQueryParsePostRequest
 */
export interface DefaultApiParseQueryParsePostRequest {
    /**
     * 
     * @type {SearchQueryIn}
     * @memberof DefaultApiParseQueryParsePost
     */
    readonly searchQueryIn: SearchQueryIn

    /**
     * To ground entities or not.
     * @type {boolean}
     * @memberof DefaultApiParseQueryParsePost
     */
    readonly ground?: boolean
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Forward INDRA request.
     * @summary Get Indra
     * @param {DefaultApiGetIndraIndraRestOfPathPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getIndraIndraRestOfPathPost(requestParameters: DefaultApiGetIndraIndraRestOfPathPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getIndraIndraRestOfPathPost(requestParameters.restOfPath, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Parse unstructured search.
     * @summary Parse Query
     * @param {DefaultApiParseQueryParsePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public parseQueryParsePost(requestParameters: DefaultApiParseQueryParsePostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).parseQueryParsePost(requestParameters.searchQueryIn, requestParameters.ground, options).then((request) => request(this.axios, this.basePath));
    }
}


